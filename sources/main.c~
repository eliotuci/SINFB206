#ifdef __linux__ //On Linux OS
#include <GL/glut.h>
#include <GL/glu.h>
#elif __APPLE__ //On MAC OSX
#include <GLUT/glut.h>
#include <OpenGL/glu.h>
#endif

#include "../headers/general.h"
#include "../headers/agents.h"

void initGL( int argc, char **argv) { 
  glutInit(&argc, argv);  // init GLUT and create window
  glutInitWindowPosition(X_WINDOW_POS, Y_WINDOW_POS);//Position the windows on the screen
  glutInitWindowSize(X_WINDOW_SIZE, Y_WINDOW_SIZE);//Resize the graphic window
  glutInitDisplayMode(GLUT_DEPTH | GLUT_DOUBLE | GLUT_RGB);
  glutCreateWindow("SINFB2016 project - 2019/2020");
  glClearColor(1.0, 1.0, 1.0, 1.0);//set the background color
  isAnimating = true;
}

void renderBitmapString(float x, float y, void *font,const char *string){
  const char *c;
  glRasterPos2f(x, y);
  for (c=string; *c != '\0'; c++) {
    glutBitmapCharacter(font, *c);
  }
}

void draw_agents( GLfloat min_coordinate, GLfloat max_coordinate, GLfloat size ){
  /*
  int numSegments = 100;
  GLfloat angle;
  for( int a =0; a < NUM_BLACK_AGENTS; a++){
    GLfloat x_pos = agents.b_agent[a].x_pos; 
    GLfloat y_pos = agents.b_agent[a].y_pos;
    glBegin(GL_TRIANGLE_FAN );
    glColor3f(0.5f, 0.5f, 0.5f);
    for(int i = 0; i <= numSegments; i++){
      angle = 2.0f * PI * (float)(i) / (double)(numSegments);
      glVertex2f(min_coordinate + (size*x_pos + size/2) + cosf(angle) * (size/2),
		 min_coordinate + (size*y_pos+size/2) + sinf(angle) * (size/2));
    }
    glEnd();
    char sa[5];
    sprintf(sa, "%d", a);
    glColor3d(1.0, 0.0, 0.0);
    renderBitmapString(min_coordinate + (size*x_pos + size/2),
		       min_coordinate + (size*y_pos + size/2), (void*)GLUT_BITMAP_TIMES_ROMAN_24, sa);
  }
    				
  for( int a =0; a < NUM_GREEN_AGENTS; a++){
    GLfloat x_pos = agents.g_agent[a].x_pos; 
    GLfloat y_pos = agents.g_agent[a].y_pos;
    glBegin(GL_TRIANGLE_FAN );
    glColor3f(1.0f, 1.0f, 0.0f);
    for(int i = 0; i <= numSegments; i++){
      angle = 2.0f * PI * (float)(i) / (double)(numSegments);
      glVertex2f(min_coordinate + (size*x_pos + size/2) + cosf(angle) * (size/2),
		 min_coordinate + (size*y_pos+size/2) + sinf(angle) * (size/2));
    }
    glEnd();
    char sa[5];
    sprintf(sa, "%d", a);
    glColor3d(1.0, 0.0, 0.0);
    renderBitmapString(min_coordinate + (size*x_pos + size/2),
		       min_coordinate + (size*y_pos + size/2), (void*)GLUT_BITMAP_TIMES_ROMAN_24, sa);
  }
  */

  glLoadIdentity();
  for( int a =0; a < NUM_BLACK_AGENTS; a++){
    GLfloat x_pos = agents.b_agent[a].x_pos;
    GLfloat y_pos = agents.b_agent[a].y_pos;
    GLfloat offset = 0.005;
    glBegin(GL_QUADS);//This is the black agent
    glColor3f(0.0f, 0.0f, 0.0f);
    glVertex2f( min_coordinate+(x_pos*size)+offset,     max_coordinate-((y_pos+1)*size)+offset);
    glVertex2f( min_coordinate+((x_pos+1)*size)-offset, max_coordinate-((y_pos+1)*size)+offset);
    glVertex2f( min_coordinate+((x_pos+1)*size)-offset, max_coordinate-(y_pos*size)-offset);
    glVertex2f( min_coordinate+(x_pos*size)+offset,     max_coordinate-(y_pos*size)-offset);
    glEnd();
  }
  
  for( int a =0; a < NUM_GREEN_AGENTS; a++){
    GLfloat x_pos = agents.g_agent[a].x_pos;
    GLfloat y_pos = agents.g_agent[a].y_pos;
    GLfloat offset = 0.005;
    glBegin(GL_QUADS);//This is the green agent
    glColor3f(0.0f, 1.0f, 0.0f);
    glVertex2f( min_coordinate+(x_pos*size)+offset,     max_coordinate-((y_pos+1)*size)+offset);
    glVertex2f( min_coordinate+((x_pos+1)*size)-offset, max_coordinate-((y_pos+1)*size)+offset);
    glVertex2f( min_coordinate+((x_pos+1)*size)-offset, max_coordinate-(y_pos*size)-offset);
    glVertex2f( min_coordinate+(x_pos*size)+offset,     max_coordinate-(y_pos*size)-offset);
    glEnd();
  }
}

void renderScene(void) {
  
  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
  
  GLfloat offset = 0.5;
  GLfloat size = (2.0f-offset)/(float)(NUM_CELLS_PER_COLUMN);
  GLfloat min_coordinate = -1.0f + (offset*0.5);
  GLfloat max_coordinate = 1.0f - (offset*0.5);

  //This is to draw the grid, which extend
  // from point (min_coordinate, min_coordinate) bottom left, to point (max_coordinate, max_coordinate) top right
  char letter;
  for(int i = 0, letter = 'a'; i < NUM_CELLS_PER_COLUMN+1; i++, ++letter){//This is a square grid
    GLfloat target_point = min_coordinate + (i*size);
    glBegin( GL_LINES );
    glColor3f(0.0f, 0.0f, 0.0f);//This is to define the colour of the grid lines
    glVertex2f(min_coordinate, target_point); //X, and Y coordinate of the horizontal line start
    glVertex2f(max_coordinate, target_point );//X, and Y coordinate of the horizontal line end    
    glVertex2f(target_point, min_coordinate); //X, and Y coordinate of the vertical line start
    glVertex2f(target_point, max_coordinate); //X, and Y coordinate of the vertical line end
    glEnd();
    if( i < NUM_CELLS_PER_COLUMN ){
      char sa[5];
      sprintf(sa, "%d", i+1);
      renderBitmapString(max_coordinate+0.02, target_point+(size*0.5), (void*)GLUT_BITMAP_9_BY_15, &sa);
      renderBitmapString(target_point+(size*0.5), max_coordinate+0.02, (void*)GLUT_BITMAP_9_BY_15, &letter );
    }
  }
    
  draw_agents( min_coordinate, max_coordinate, size );
    
  glutSwapBuffers();
  glFlush();
}

static void animate ( int value ){
  glutTimerFunc(TIME_IN_MILLISECOND, animate, 0);
  if( isAnimating )
    update_agents_positions ( );
  glutPostRedisplay();
}

void reshape ( GLsizei width, GLsizei height ){
  if( height == 0 ) height = 1;
  GLfloat ratio = (GLfloat)(width)/(GLfloat)(height);
  glMatrixMode(GL_PROJECTION);
  glLoadIdentity();
  glViewport(0, 0, width, height);    
  if( width >= height ){
    gluOrtho2D(-1.0*ratio, 1.0*ratio, -1.0, 1.0);
  }else{
    gluOrtho2D(-1.0, 1.0, -1.0/ratio, 1.0/ratio );
  }
}

void process_normal_keys( unsigned char key, int x, int y ){
  if( key == 'x') // exit animation
    exit(0);
  else if( key == 'p') //pause animation
    isAnimating = false;
  else if (key == 's') //restart animation
    isAnimating=true;
  
}

int main(int argc, char **argv) {

  parse_command_line( argc, argv );//call command line parser
  
  free_generator( );//Init the GSL libary
  init_generator( m_rootSeed ); //Seed the GSL random number the generator 

  init_agents_position_and_colour( );
    
  initGL( argc, argv); //Init the graphic window

  glutDisplayFunc(renderScene); // register callbacks
  glutReshapeFunc( reshape );
  //glutIdleFunc( renderScene );

  glutKeyboardFunc(process_normal_keys);
  glutPostRedisplay();
  glutTimerFunc(TIME_IN_MILLISECOND, animate, 0); 
  glutMainLoop();   // enter GLUT event processing cycle
      
  return 1;
}

